@lca_dflt = [ a aacute abreve acircumflex adieresis adotbelow agrave ahook amacron aogonek aring aringacute atilde abreveacute abrevedotbelow abrevegrave abrevehook abrevetilde acircumflexacute acircumflexdotbelow acircumflexgrave acircumflexhook acircumflextilde ];

@lca_alt1 = [ a.alt01 aacute.alt01 abreve.alt01 acircumflex.alt01 adieresis.alt01 adotbelow.alt01 agrave.alt01 ahook.alt01 amacron.alt01 aogonek.alt01 aring.alt01 aringacute.alt01 atilde.alt01 abreveacute.alt01 abrevedotbelow.alt01 abrevegrave.alt01 abrevehook.alt01 abrevetilde.alt01 acircumflexacute.alt01 acircumflexdotbelow.alt01 acircumflexgrave.alt01 acircumflexhook.alt01 acircumflextilde.alt01 ];

@lca_cyrl_dflt = [ uni0430 uni04D3 uni04D1 ];

@lca_cyrl_alt1 = [ uni0430.alt01 uni04D3.alt01 uni04D1.alt01 ];

@lcg_dflt = [ g gbreve gcircumflex gcommaaccent gdotaccent ];

@lcg_alt1 = [ g.alt01 gbreve.alt01 gcircumflex.alt01 gcommaaccent.alt01 gdotaccent.alt01 ];

@numbers_dflt = [ zero one two three four five six seven eight nine ];

@numbers_sups = [ zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior ];

@numbers_sinf = [ zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior ];

@numbers_numr = [ zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr ];

@numbers_dnom = [ zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom ];

@numbers_hex = [ zero one two three four five six seven eight nine a b c d e f A B C D E F ];

# Prefix: Languagesystems
languagesystem DFLT dflt; languagesystem latn dflt; languagesystem cyrl dflt; 

# Prefix: Prefix
# ----------------
# LANGUAGE SYSTEMS
# ----------------

  # Default
  # Latin default
  # Cyrillic default

# --------------
# GLOBAL CLASSES
# --------------

feature aalt {
feature calt;

	sub a from [a.alt01]; # 1 glyph(s)
	sub g from [g.alt01 g.alt02]; # 2 glyph(s)
	sub zero from [zero.alt01 zero.alt02 zero.numr zero.dnom]; # 4 glyph(s)
	sub one from [one.numr one.dnom]; # 2 glyph(s)
	sub two from [two.numr two.dnom]; # 2 glyph(s)
	sub three from [three.numr three.dnom]; # 2 glyph(s)
	sub four from [four.numr four.dnom]; # 2 glyph(s)
	sub five from [five.numr five.dnom]; # 2 glyph(s)
	sub six from [six.numr six.dnom]; # 2 glyph(s)
	sub seven from [seven.numr seven.dnom]; # 2 glyph(s)
	sub eight from [eight.numr eight.dnom]; # 2 glyph(s)
	sub nine from [nine.numr nine.dnom]; # 2 glyph(s)
	sub aacute from [aacute.alt01]; # 1 glyph(s)
	sub abreve from [abreve.alt01]; # 1 glyph(s)
	sub acircumflex from [acircumflex.alt01]; # 1 glyph(s)
	sub adieresis from [adieresis.alt01]; # 1 glyph(s)
	sub adotbelow from [adotbelow.alt01]; # 1 glyph(s)
	sub agrave from [agrave.alt01]; # 1 glyph(s)
	sub ahook from [ahook.alt01]; # 1 glyph(s)
	sub amacron from [amacron.alt01]; # 1 glyph(s)
	sub aogonek from [aogonek.alt01]; # 1 glyph(s)
	sub aring from [aring.alt01]; # 1 glyph(s)
	sub aringacute from [aringacute.alt01]; # 1 glyph(s)
	sub atilde from [atilde.alt01]; # 1 glyph(s)
	sub abreveacute from [abreveacute.alt01]; # 1 glyph(s)
	sub abrevedotbelow from [abrevedotbelow.alt01]; # 1 glyph(s)
	sub abrevegrave from [abrevegrave.alt01]; # 1 glyph(s)
	sub abrevehook from [abrevehook.alt01]; # 1 glyph(s)
	sub abrevetilde from [abrevetilde.alt01]; # 1 glyph(s)
	sub acircumflexacute from [acircumflexacute.alt01]; # 1 glyph(s)
	sub acircumflexdotbelow from [acircumflexdotbelow.alt01]; # 1 glyph(s)
	sub acircumflexgrave from [acircumflexgrave.alt01]; # 1 glyph(s)
	sub acircumflexhook from [acircumflexhook.alt01]; # 1 glyph(s)
	sub acircumflextilde from [acircumflextilde.alt01]; # 1 glyph(s)
	sub gbreve from [gbreve.alt01]; # 1 glyph(s)
	sub gcircumflex from [gcircumflex.alt01]; # 1 glyph(s)
	sub gcommaaccent from [gcommaaccent.alt01]; # 1 glyph(s)
	sub gdotaccent from [gdotaccent.alt01]; # 1 glyph(s)
	sub germandbls from [germandbls.alt01]; # 1 glyph(s)
	sub tilde from [tilde.alt01 tilde.case tilde.alt01.case]; # 3 glyph(s)
	sub macron from [macron.case]; # 1 glyph(s)
	sub dotaccent from [dotaccent.case]; # 1 glyph(s)
	sub dieresis from [dieresis.case]; # 1 glyph(s)
	sub hungarumlaut from [hungarumlaut.case]; # 1 glyph(s)
	sub acute from [acute.case]; # 1 glyph(s)
	sub grave from [grave.case]; # 1 glyph(s)
	sub circumflex from [circumflex.case]; # 1 glyph(s)
	sub caron from [caron.case]; # 1 glyph(s)
	sub breve from [breve.case breve.cyrl breve.cyrl_case]; # 3 glyph(s)
	sub ring from [ring.case]; # 1 glyph(s)
	sub ringacute from [ringacute.case]; # 1 glyph(s)
	sub hookcomb from [hookcomb.case]; # 1 glyph(s)
	sub breveacute from [breveacute.case]; # 1 glyph(s)
	sub brevegrave from [brevegrave.case]; # 1 glyph(s)
	sub brevehook from [brevehook.case]; # 1 glyph(s)
	sub brevetilde from [brevetilde.case]; # 1 glyph(s)
	sub dieresisacute from [dieresisacute.case]; # 1 glyph(s)
	sub dieresiscaron from [dieresiscaron.case]; # 1 glyph(s)
	sub dieresisgrave from [dieresisgrave.case]; # 1 glyph(s)
	sub circumflexacute from [circumflexacute.case]; # 1 glyph(s)
	sub circumflexbreve from [circumflexbreve.case]; # 1 glyph(s)
	sub circumflexgrave from [circumflexgrave.case]; # 1 glyph(s)
	sub circumflexhook from [circumflexhook.case]; # 1 glyph(s)
	sub dieresismacron from [dieresismacron.case]; # 1 glyph(s)
	sub circumflextilde from [circumflextilde.case]; # 1 glyph(s)
	sub uni0430 from [uni0430.alt01]; # 1 glyph(s)
	sub uni04D3 from [uni04D3.alt01]; # 1 glyph(s)
	sub uni04D1 from [uni04D1.alt01]; # 1 glyph(s)
} aalt;

feature ccmp {
	# glyph composition/decomposition
	@uc_basic = [A AE Aogonek B C Ccedilla D E Eogonek F G H I Iogonek J K L M N O OE Ohorn Oslash P Q R S Schwa T U Uhorn Uogonek V W X Y Z]; # 37 glyphs
	@acc_comb_top = [acutecomb breveacute brevecomb brevegrave brevehook brevetilde caroncomb caronslovakcomb circumflexacute circumflexbreve circumflexcomb circumflexgrave circumflexhook circumflextilde commaturnedtopcomb dieresisacute dieresiscaron dieresiscomb dieresisgrave dieresismacron dotaccentcomb gravecomb hookcomb horncomb hungarumlautcomb macroncomb ringcomb tildecomb]; # 28 glyphs
	@acc_comb_dflt = [breveacute brevegrave brevehook brevetilde circumflexacute circumflexbreve circumflexgrave circumflexhook circumflextilde dieresisacute dieresiscaron dieresisgrave dieresismacron hookcomb]; # 14 glyphs
	@acc_comb_case = [breveacute.case brevegrave.case brevehook.case brevetilde.case circumflexacute.case circumflexbreve.case circumflexgrave.case circumflexhook.case circumflextilde.case dieresisacute.case dieresiscaron.case dieresisgrave.case dieresismacron.case hookcomb.case]; # 14 glyphs

	lookup nonContextSubs {
		sub brevecomb acutecomb by breveacute;
		sub brevecomb gravecomb by brevegrave;
		sub brevecomb hookcomb by brevehook;
		sub brevecomb tildecomb by brevetilde;
		sub circumflexcomb acutecomb by circumflexacute;
		sub circumflexcomb gravecomb by circumflexgrave;
		sub circumflexcomb hookcomb by circumflexhook;
		sub circumflexcomb tildecomb by circumflextilde;
		sub circumflexcomb brevecomb by circumflexbreve;
		sub dieresiscomb acutecomb by dieresisacute;
		sub dieresiscomb caroncomb by dieresiscaron;
		sub dieresiscomb gravecomb by dieresisgrave;
		sub dieresiscomb macroncomb by dieresismacron;
	} nonContextSubs;

	lookup contextSubs {
		sub [L d l t] caroncomb' by caronslovakcomb; # /Lcaron /dcaron /lcaron /tcaron
		sub g commabelowcomb' by commaturnedtopcomb; # /gcommaaccent
		sub i' @acc_comb_top by dotlessi;
		sub j' @acc_comb_top by dotlessj;
		sub @uc_basic @acc_comb_dflt' by @acc_comb_case; # case accents
	} contextSubs;
} ccmp;

feature ordn {
	# ordinals
	sub [a o] by [ordfeminine ordmasculine];
} ordn;

feature frac {
	# fractions
	sub one [slash fraction] two by onehalf;
	sub one [slash fraction] three by uni2153;
	sub two [slash fraction] three by uni2154;
	sub one [slash fraction] four by onequarter;
	sub three [slash fraction] four by threequarters;
	sub one [slash fraction] five by uni2155;
	sub two [slash fraction] five by uni2156;
	sub three [slash fraction] five by uni2157;
	sub four [slash fraction] five by uni2158;
	sub one [slash fraction] six by uni2159;
	sub five [slash fraction] six by uni215A;
	sub one [slash fraction] seven by uni2150;
	sub one [slash fraction] eight by uni215B;
	sub three [slash fraction] eight by uni215C;
	sub five [slash fraction] eight by uni215D;
	sub seven [slash fraction] eight by uni215E;
	sub one [slash fraction] nine by uni2151;
} frac;

feature numr {
	# numerators
	sub @numbers_dflt by @numbers_numr;
} numr;

feature dnom {
	# denominators
	sub @numbers_dflt by @numbers_dnom;
} dnom;

feature sups {
	# superiors
	sub @numbers_dflt by @numbers_sups;
} sups;

feature sinf {
	# inferiors
	sub @numbers_dflt by @numbers_sinf;
} sinf;

feature zero {
	# slashed zero
	sub zero by zero.alt01;
} zero;

feature ss01 {
	featureNames {
		name 3 1 0x0409 "simple lowercase a"; # Win / Unicode / English US
		name 1 0 0 "simple lowercase a"; #   Mac / Roman / English
	};
	# stylistic set 1 - single storey a
	sub @lca_dflt by @lca_alt1;
	sub @lca_cyrl_dflt by @lca_cyrl_alt1;
} ss01;

feature ss02 {
	featureNames {
		name 3 1 0x0409 "simple lowercase g"; # Win / Unicode / English US
		name 1 0 0 "simple lowercase g"; #   Mac / Roman / English
	};
	# stylistic set 2 - single storey g
	sub @lcg_dflt by @lcg_alt1;
} ss02;

feature ss03 {
	featureNames {
		name 3 1 0x0409 "slashed number zero"; # Win / Unicode / English US
		name 1 0 0 "slashed number zero"; #   Mac / Roman / English
	};
	# slashed zero
	sub zero by zero.alt01;
} ss03;

feature ss04 {
	featureNames {
		name 3 1 0x0409 "plain number zero"; # Win / Unicode / English US
		name 1 0 0 "plain number zero"; #   Mac / Roman / English
	};
	# plain zero
	sub zero by zero.alt02;
} ss04;

feature ss05 {
	featureNames {
		name 3 1 0x0409 "alternate lowercase eszett"; # Win / Unicode / English US
		name 1 0 0 "alternate lowercase eszett"; #   Mac / Roman / English
	};
	# alternative german eszett
	sub germandbls by germandbls.alt01;
} ss05;

feature salt {
	# stylistic alternates - all stylistic sets combined
	sub @lca_dflt by @lca_alt1;
	sub @lcg_dflt by @lcg_alt1;
	sub @lca_cyrl_dflt by @lca_cyrl_alt1;
	sub zero by zero.alt02;
	sub germandbls by germandbls.alt01;
} salt;

feature mark {
	# Created: Sun May 21 13:18:12 2017
	# PS Name: IBMEliotMono
	# MM Inst: IBM Eliot Mono
	# exported from FontLab

	@mGC_bottom_0_0 = [cedillacomb commabelowcomb dotbelowcomb];
	@mGC_top_0_516 = [acutecomb breveacute brevecomb brevegrave brevehook brevetilde caroncomb circumflexacute circumflexbreve circumflexcomb circumflexgrave circumflexhook circumflextilde commaturnedtopcomb dieresisacute dieresiscaron dieresiscomb dieresisgrave dieresismacron dotaccentcomb gravecomb hookcomb hungarumlautcomb macroncomb ringcomb tildecomb];
	@mGC_top_0_698 = [breveacute.case brevegrave.case brevehook.case brevetilde.case circumflexacute.case circumflexbreve.case circumflexgrave.case circumflexhook.case circumflextilde.case dieresisacute.case dieresiscaron.case dieresisgrave.case dieresismacron.case hookcomb.case];

	markClass @mGC_bottom_0_0 <anchor 0 0> @MC_bottom;
	markClass @mGC_top_0_516 <anchor 0 516> @MC_top;
	markClass @mGC_top_0_698 <anchor 0 698> @MC_top;
	markClass caronslovakcomb <anchor 0 740> @MC_topright;
	markClass ogonekcomb <anchor 0 0> @MC_bottomright;

	lookup MARK_BASE_bottom {
		@bGC_D_bottom = [D J];
		@bGC_F_bottom = [F P];
		@bGC_c_bottom = [c h n];
		@bGC_f_bottom = [f C R];
		@bGC_i_bottom = [i dotlessi];
		@bGC_l_bottom = [l m o v w x z A G H I M N O T U V W X Y Z ohorn Ohorn Uhorn];
		@bGC_u_bottom = [u S uhorn];
		pos base @bGC_D_bottom <anchor 277 0> mark @MC_bottom;
		pos base @bGC_F_bottom <anchor 132 0> mark @MC_bottom;
		pos base @bGC_c_bottom <anchor 303 0> mark @MC_bottom;
		pos base @bGC_f_bottom <anchor 308 0> mark @MC_bottom;
		pos base @bGC_i_bottom <anchor 332 0> mark @MC_bottom;
		pos base @bGC_l_bottom <anchor 300 0> mark @MC_bottom;
		pos base @bGC_u_bottom <anchor 297 0> mark @MC_bottom;
		pos base B <anchor 315 0> mark @MC_bottom;
		pos base E <anchor 305 0> mark @MC_bottom;
		pos base K <anchor 322 0> mark @MC_bottom;
		pos base L <anchor 327 0> mark @MC_bottom;
		pos base a <anchor 283 0> mark @MC_bottom;
		pos base a.alt01 <anchor 287 0> mark @MC_bottom;
		pos base b <anchor 317 0> mark @MC_bottom;
		pos base d <anchor 282 0> mark @MC_bottom;
		pos base e <anchor 309 0> mark @MC_bottom;
		pos base k <anchor 323 0> mark @MC_bottom;
		pos base r <anchor 268 0> mark @MC_bottom;
		pos base s <anchor 294 0> mark @MC_bottom;
		pos base t <anchor 375 0> mark @MC_bottom;
		pos base y <anchor 460 0> mark @MC_bottom;
	} MARK_BASE_bottom;


	lookup MARK_BASE_bottomright {
		@bGC_i_bottomright = [i dotlessi];
		pos base @bGC_i_bottomright <anchor 546 0> mark @MC_bottomright;
		pos base A <anchor 570 0> mark @MC_bottomright;
		pos base E <anchor 520 0> mark @MC_bottomright;
		pos base I <anchor 516 0> mark @MC_bottomright;
		pos base U <anchor 394 0> mark @MC_bottomright;
		pos base a <anchor 550 0> mark @MC_bottomright;
		pos base a.alt01 <anchor 505 0> mark @MC_bottomright;
		pos base e <anchor 391 0> mark @MC_bottomright;
		pos base u <anchor 502 0> mark @MC_bottomright;
	} MARK_BASE_bottomright;


	lookup MARK_BASE_top {
		@bGC_J_top = [J K];
		@bGC_a.alt01_top = [a.alt01 g.alt01];
		@bGC_g.alt02_top = [g.alt02 m o v w x y z ae oslash ohorn];
		@bGC_g_top = [g u uhorn];
		@bGC_l_top = [l A H I M N O P Q T U V W X Y Z Oslash Ohorn Uhorn];
		pos base @bGC_J_top <anchor 313 698> mark @MC_top;
		pos base @bGC_a.alt01_top <anchor 287 516> mark @MC_top;
		pos base @bGC_g.alt02_top <anchor 300 516> mark @MC_top;
		pos base @bGC_g_top <anchor 297 516> mark @MC_top;
		pos base @bGC_l_top <anchor 300 698> mark @MC_top;
		pos base AE <anchor 393 698> mark @MC_top;
		pos base B <anchor 295 698> mark @MC_top;
		pos base C <anchor 328 698> mark @MC_top;
		pos base D <anchor 277 698> mark @MC_top;
		pos base E <anchor 305 698> mark @MC_top;
		pos base F <anchor 310 698> mark @MC_top;
		pos base G <anchor 306 698> mark @MC_top;
		pos base L <anchor 162 698> mark @MC_top;
		pos base R <anchor 308 698> mark @MC_top;
		pos base S <anchor 298 698> mark @MC_top;
		pos base a <anchor 283 516> mark @MC_top;
		pos base c <anchor 313 516> mark @MC_top;
		pos base dotlessi <anchor 332 516> mark @MC_top;
		pos base dotlessj <anchor 392 516> mark @MC_top;
		pos base e <anchor 302 516> mark @MC_top;
		pos base h <anchor 138 698> mark @MC_top;
		pos base n <anchor 303 516> mark @MC_top;
		pos base p <anchor 317 516> mark @MC_top;
		pos base q <anchor 282 516> mark @MC_top;
		pos base r <anchor 353 516> mark @MC_top;
		pos base s <anchor 298 516> mark @MC_top;
	} MARK_BASE_top;


	lookup MARK_BASE_topright {
		pos base L <anchor 290 740> mark @MC_topright;
		pos base d <anchor 567 740> mark @MC_topright;
		pos base l <anchor 426 740> mark @MC_topright;
		pos base t <anchor 387 760> mark @MC_topright;
	} MARK_BASE_topright;
} mark;

feature locl {
# automatic
script latn;
language NLD;
sub iacute j' by jacute;
sub Iacute J' by Jacute;
language CAT;
sub  l' periodcentered' l by ldot;
sub  L' periodcentered' L by Ldot;
language ROM;
sub Scedilla by Scommaaccent;
sub scedilla by scommaaccent;
sub Tcedilla by Tcommaaccent;
sub tcedilla by tcommaaccent;
language MOL;
sub Scedilla by Scommaaccent;
sub scedilla by scommaaccent;
sub Tcedilla by Tcommaaccent;
sub tcedilla by tcommaaccent;
} locl;

feature subs {
# automatic
sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
} subs;

feature case {
# automatic
sub tilde by tilde.case;
sub tilde.alt01 by tilde.alt01.case;
sub macron by macron.case;
sub dotaccent by dotaccent.case;
sub dieresis by dieresis.case;
sub hungarumlaut by hungarumlaut.case;
sub acute by acute.case;
sub grave by grave.case;
sub circumflex by circumflex.case;
sub caron by caron.case;
sub breve by breve.case;
sub ring by ring.case;
sub ringacute by ringacute.case;
sub hookcomb by hookcomb.case;
sub breveacute by breveacute.case;
sub brevegrave by brevegrave.case;
sub brevehook by brevehook.case;
sub brevetilde by brevetilde.case;
sub dieresisacute by dieresisacute.case;
sub dieresiscaron by dieresiscaron.case;
sub dieresisgrave by dieresisgrave.case;
sub circumflexacute by circumflexacute.case;
sub circumflexbreve by circumflexbreve.case;
sub circumflexgrave by circumflexgrave.case;
sub circumflexhook by circumflexhook.case;
sub dieresismacron by dieresismacron.case;
sub circumflextilde by circumflextilde.case;
} case;

feature liga {
sub less equal equal greater by less_equal_equal_greater.liga;
sub less exclam hyphen hyphen by less_exclam_hyphen_hyphen.liga;
sub numbersign numbersign numbersign numbersign by numbersign_numbersign_numbersign_numbersign.liga;
sub asterisk asterisk asterisk by asterisk_asterisk_asterisk.liga;
sub colon colon colon by colon_colon_colon.liga;
sub equal colon equal by equal_colon_equal.liga;
sub equal equal equal by equal_equal_equal.liga;
sub equal equal greater by equal_equal_greater.liga;
sub equal exclam equal by equal_exclam_equal.liga;
sub equal greater greater by equal_greater_greater.liga;
sub equal less less by equal_less_less.liga;
sub exclam equal equal by exclam_equal_equal.liga;
sub greater equal greater by greater_equal_greater.liga;
sub greater greater equal by greater_greater_equal.liga;
sub greater greater greater by greater_greater_greater.liga;
sub greater greater hyphen by greater_greater_hyphen.liga;
sub hyphen hyphen greater by hyphen_hyphen_greater.liga;
sub hyphen less less by hyphen_less_less.liga;
sub less equal equal by less_equal_equal.liga;
sub less equal greater by less_equal_greater.liga;
sub less equal less by less_equal_less.liga;
sub less less equal by less_less_equal.liga;
sub less less less by less_less_less.liga;
sub less slash greater by less_slash_greater.liga;
sub numbersign numbersign numbersign by numbersign_numbersign_numbersign.liga;
sub period period less by period_period_less.liga;
sub period period period by period_period_period.liga;
sub slash asterisk asterisk by slash_asterisk_asterisk.liga;
sub slash slash slash by slash_slash_slash.liga;
sub ampersand ampersand by ampersand_ampersand.liga;
sub asterisk asterisk by asterisk_asterisk.liga;
sub asterisk slash by asterisk_slash.liga;
sub bar bar by bar_bar.liga;
sub colon colon by colon_colon.liga;
sub colon equal by colon_equal.liga;
sub equal equal by equal_equal.liga;
sub equal greater by equal_greater.liga;
sub exclam equal by exclam_equal.liga;
sub exclam exclam by exclam_exclam.liga;
sub greater equal by greater_equal.liga;
sub greater greater by greater_greater.liga;
sub greater hyphen by greater_hyphen.liga;
sub hyphen greater by hyphen_greater.liga;
sub hyphen less by hyphen_less.liga;
sub less equal by less_equal.liga;
sub less greater by less_greater.liga;
sub less hyphen by less_hyphen.liga;
sub less less by less_less.liga;
sub less slash by less_slash.liga;
sub numbersign numbersign by numbersign_numbersign.liga;
sub period period by period_period.liga;
sub question colon by question_colon.liga;
sub question period by question_period.liga;
sub question question by question_question.liga;
sub semicolon semicolon by semicolon_semicolon.liga;
sub slash asterisk by slash_asterisk.liga;
sub slash equal by slash_equal.liga;
sub slash greater by slash_greater.liga;
sub slash slash by slash_slash.liga;
sub underscore underscore by underscore_underscore.liga;
sub zero x' @numbers_hex by multiply;
} liga;

feature calt {
### calt code adapted from Fira Code
lookup less_equal_equal_greater {
  ignore sub less less' equal equal greater;
  ignore sub less' equal equal greater greater;
  ignore sub parenleft question less' equal equal greater;
  sub LIG LIG LIG greater' by less_equal_equal_greater.liga;
  sub LIG LIG  equal' greater  by LIG;
  sub LIG  equal'  equal  greater  by LIG;
  sub less'   equal   equal  greater  by LIG;
} less_equal_equal_greater;

lookup less_exclam_hyphen_hyphen {
  ignore sub less less' exclam hyphen hyphen;
  ignore sub less' exclam hyphen hyphen hyphen;
  ignore sub parenleft question less' exclam hyphen hyphen;
  sub LIG LIG LIG hyphen' by less_exclam_hyphen_hyphen.liga;
  sub LIG LIG  hyphen' hyphen  by LIG;
  sub LIG  exclam'  hyphen  hyphen  by LIG;
  sub less'   exclam   hyphen  hyphen  by LIG;
} less_exclam_hyphen_hyphen;

lookup numbersign_numbersign_numbersign_numbersign {
  ignore sub numbersign numbersign' numbersign numbersign numbersign;
  ignore sub numbersign' numbersign numbersign numbersign numbersign;
  sub LIG LIG LIG numbersign' by numbersign_numbersign_numbersign_numbersign.liga;
  sub LIG LIG  numbersign' numbersign  by LIG;
  sub LIG  numbersign'  numbersign  numbersign  by LIG;
  sub numbersign'   numbersign   numbersign  numbersign  by LIG;
} numbersign_numbersign_numbersign_numbersign;

lookup asterisk_asterisk_asterisk {
  ignore sub asterisk asterisk' asterisk asterisk;
  ignore sub asterisk' asterisk asterisk asterisk;
  ignore sub slash asterisk' asterisk asterisk;
  ignore sub asterisk' asterisk asterisk slash;
  sub LIG LIG asterisk' by asterisk_asterisk_asterisk.liga;
  sub LIG  asterisk' asterisk  by LIG;
  sub asterisk'   asterisk  asterisk  by LIG;
} asterisk_asterisk_asterisk;

lookup colon_colon_colon {
  ignore sub colon colon' colon colon;
  ignore sub colon' colon colon colon;
  ignore sub parenleft question colon' colon colon;
  sub LIG LIG colon' by colon_colon_colon.liga;
  sub LIG  colon' colon  by LIG;
  sub colon'   colon  colon  by LIG;
} colon_colon_colon;

lookup equal_colon_equal {
  ignore sub equal equal' colon equal;
  ignore sub equal' colon equal equal;
  ignore sub parenleft question equal' colon equal;
  ignore sub parenleft question less equal' colon equal;
  sub LIG LIG equal' by equal_colon_equal.liga;
  sub LIG  colon' equal  by LIG;
  sub equal'   colon  equal  by LIG;
} equal_colon_equal;

lookup equal_equal_equal {
  ignore sub equal equal' equal equal;
  ignore sub equal' equal equal equal;
  ignore sub parenleft question equal' equal equal;
  ignore sub parenleft question less equal' equal equal;
  sub LIG LIG equal' by equal_equal_equal.liga;
  sub LIG  equal' equal  by LIG;
  sub equal'   equal  equal  by LIG;
} equal_equal_equal;

lookup equal_equal_greater {
  ignore sub equal equal' equal greater;
  ignore sub equal' equal greater greater;
  ignore sub parenleft question equal' equal greater;
  ignore sub parenleft question less equal' equal greater;
  sub LIG LIG greater' by equal_equal_greater.liga;
  sub LIG  equal' greater  by LIG;
  sub equal'   equal  greater  by LIG;
} equal_equal_greater;

lookup equal_exclam_equal {
  ignore sub equal equal' exclam equal;
  ignore sub equal' exclam equal equal;
  ignore sub parenleft question equal' exclam equal;
  ignore sub parenleft question less equal' exclam equal;
  sub LIG LIG equal' by equal_exclam_equal.liga;
  sub LIG  exclam' equal  by LIG;
  sub equal'   exclam  equal  by LIG;
} equal_exclam_equal;

lookup equal_greater_greater {
  ignore sub equal equal' greater greater;
  ignore sub equal' greater greater greater;
  ignore sub parenleft question equal' greater greater;
  ignore sub parenleft question less equal' greater greater;
  sub LIG LIG greater' by equal_greater_greater.liga;
  sub LIG  greater' greater  by LIG;
  sub equal'   greater  greater  by LIG;
} equal_greater_greater;

lookup equal_less_less {
  ignore sub equal equal' less less;
  ignore sub equal' less less less;
  ignore sub parenleft question equal' less less;
  ignore sub parenleft question less equal' less less;
  sub LIG LIG less' by equal_less_less.liga;
  sub LIG  less' less  by LIG;
  sub equal'   less  less  by LIG;
} equal_less_less;

lookup exclam_equal_equal {
  ignore sub exclam exclam' equal equal;
  ignore sub exclam' equal equal equal;
  ignore sub parenleft question exclam' equal equal;
  ignore sub parenleft question less exclam' equal equal;
  sub LIG LIG equal' by exclam_equal_equal.liga;
  sub LIG  equal' equal  by LIG;
  sub exclam'   equal  equal  by LIG;
} exclam_equal_equal;

lookup greater_equal_greater {
  ignore sub greater greater' equal greater;
  ignore sub greater' equal greater greater;
  sub LIG LIG greater' by greater_equal_greater.liga;
  sub LIG  equal' greater  by LIG;
  sub greater'   equal  greater  by LIG;
} greater_equal_greater;

lookup greater_greater_equal {
  ignore sub greater greater' greater equal;
  ignore sub greater' greater equal equal;
  sub LIG LIG equal' by greater_greater_equal.liga;
  sub LIG  greater' equal  by LIG;
  sub greater'   greater  equal  by LIG;
} greater_greater_equal;

lookup greater_greater_greater {
  ignore sub greater greater' greater greater;
  ignore sub greater' greater greater greater;
  ignore sub asterisk greater' greater greater;
  ignore sub plus greater' greater greater;
  ignore sub dollar greater' greater greater;
  sub LIG LIG greater' by greater_greater_greater.liga;
  sub LIG  greater' greater  by LIG;
  sub greater'   greater  greater  by LIG;
} greater_greater_greater;

lookup greater_greater_hyphen {
  ignore sub greater greater' greater hyphen;
  ignore sub greater' greater hyphen hyphen;
  sub LIG LIG hyphen' by greater_greater_hyphen.liga;
  sub LIG  greater' hyphen  by LIG;
  sub greater'   greater  hyphen  by LIG;
} greater_greater_hyphen;

lookup hyphen_hyphen_greater {
  ignore sub hyphen hyphen' hyphen greater;
  ignore sub hyphen' hyphen greater greater;
  sub LIG LIG greater' by hyphen_hyphen_greater.liga;
  sub LIG  hyphen' greater  by LIG;
  sub hyphen'   hyphen  greater  by LIG;
} hyphen_hyphen_greater;

lookup hyphen_less_less {
  ignore sub hyphen hyphen' less less;
  ignore sub hyphen' less less less;
  sub LIG LIG less' by hyphen_less_less.liga;
  sub LIG  less' less  by LIG;
  sub hyphen'   less  less  by LIG;
} hyphen_less_less;

lookup less_equal_equal {
  ignore sub less less' equal equal;
  ignore sub less' equal equal equal;
  ignore sub parenleft question less' equal equal;
  sub LIG LIG equal' by less_equal_equal.liga;
  sub LIG  equal' equal  by LIG;
  sub less'   equal  equal  by LIG;
} less_equal_equal;

lookup less_equal_greater {
  ignore sub less less' equal greater;
  ignore sub less' equal greater greater;
  ignore sub parenleft question less' equal greater;
  sub LIG LIG greater' by less_equal_greater.liga;
  sub LIG  equal' greater  by LIG;
  sub less'   equal  greater  by LIG;
} less_equal_greater;

lookup less_equal_less {
  ignore sub less less' equal less;
  ignore sub less' equal less less;
  ignore sub parenleft question less' equal less;
  sub LIG LIG less' by less_equal_less.liga;
  sub LIG  equal' less  by LIG;
  sub less'   equal  less  by LIG;
} less_equal_less;

lookup less_less_equal {
  ignore sub less less' less equal;
  ignore sub less' less equal equal;
  sub LIG LIG equal' by less_less_equal.liga;
  sub LIG  less' equal  by LIG;
  sub less'   less  equal  by LIG;
} less_less_equal;

lookup less_less_less {
  ignore sub less less' less less;
  ignore sub less' less less less;
  ignore sub less' less less asterisk;
  ignore sub less' less less plus;
  ignore sub less' less less dollar;
  sub LIG LIG less' by less_less_less.liga;
  sub LIG  less' less  by LIG;
  sub less'   less  less  by LIG;
} less_less_less;

lookup less_slash_greater {
  ignore sub less less' slash greater;
  ignore sub less' slash greater greater;
  sub LIG LIG greater' by less_slash_greater.liga;
  sub LIG  slash' greater  by LIG;
  sub less'   slash  greater  by LIG;
} less_slash_greater;

lookup numbersign_numbersign_numbersign {
  ignore sub numbersign numbersign' numbersign numbersign;
  ignore sub numbersign' numbersign numbersign numbersign;
  sub LIG LIG numbersign' by numbersign_numbersign_numbersign.liga;
  sub LIG  numbersign' numbersign  by LIG;
  sub numbersign'   numbersign  numbersign  by LIG;
} numbersign_numbersign_numbersign;

lookup period_period_less {
  ignore sub period period' period less;
  ignore sub period' period less less;
  sub LIG LIG less' by period_period_less.liga;
  sub LIG  period' less  by LIG;
  sub period'   period  less  by LIG;
} period_period_less;

lookup period_period_period {
  ignore sub period period' period period;
  ignore sub period' period period period;
  sub LIG LIG period' by period_period_period.liga;
  sub LIG  period' period  by LIG;
  sub period'   period  period  by LIG;
} period_period_period;

lookup slash_slash_slash {
  ignore sub slash slash' slash slash;
  ignore sub slash' slash slash slash;
  sub LIG LIG slash' by slash_slash_slash.liga;
  sub LIG  slash' slash  by LIG;
  sub slash'   slash  slash  by LIG;
} slash_slash_slash;

lookup ampersand_ampersand {
  ignore sub ampersand ampersand' ampersand;
  ignore sub ampersand' ampersand ampersand;
  sub LIG ampersand' by ampersand_ampersand.liga;
  sub ampersand'  ampersand  by LIG;
} ampersand_ampersand;

lookup asterisk_asterisk {
  ignore sub asterisk asterisk' asterisk;
  ignore sub asterisk' asterisk asterisk;
  ignore sub slash asterisk' asterisk;
  ignore sub asterisk' asterisk slash;
  sub LIG asterisk' by asterisk_asterisk.liga;
  sub asterisk'  asterisk  by LIG;
} asterisk_asterisk;

lookup asterisk_slash {
  ignore sub asterisk asterisk' slash;
  ignore sub asterisk' slash slash;
  ignore sub slash asterisk' slash;
  ignore sub asterisk' slash asterisk;
  sub LIG slash' by asterisk_slash.liga;
  sub asterisk'  slash  by LIG;
} asterisk_slash;

lookup bar_bar {
  ignore sub bar bar' bar;
  ignore sub bar' bar bar;
  sub LIG bar' by bar_bar.liga;
  sub bar'  bar  by LIG;
} bar_bar;

lookup colon_colon {
  ignore sub colon colon' colon;
  ignore sub colon' colon colon;
  ignore sub parenleft question colon' colon;
  sub LIG colon' by colon_colon.liga;
  sub colon'  colon  by LIG;
} colon_colon;

lookup colon_equal {
  ignore sub colon colon' equal;
  ignore sub colon' equal equal;
  ignore sub parenleft question colon' equal;
  sub LIG equal' by colon_equal.liga;
  sub colon'  equal  by LIG;
} colon_equal;

lookup equal_equal {
  ignore sub equal equal' equal;
  ignore sub equal' equal equal;
  ignore sub parenleft question equal' equal;
  ignore sub parenleft question less equal' equal;
  sub LIG equal' by equal_equal.liga;
  sub equal'  equal  by LIG;
} equal_equal;

lookup equal_greater {
  ignore sub equal equal' greater;
  ignore sub equal' greater greater;
  ignore sub parenleft question equal' greater;
  ignore sub parenleft question less equal' greater;
  sub LIG greater' by equal_greater.liga;
  sub equal'  greater  by LIG;
} equal_greater;

lookup exclam_equal {
  ignore sub exclam exclam' equal;
  ignore sub exclam' equal equal;
  ignore sub parenleft question exclam' equal;
  ignore sub parenleft question less exclam' equal;
  sub LIG equal' by exclam_equal.liga;
  sub exclam'  equal  by LIG;
} exclam_equal;

lookup exclam_exclam {
  ignore sub exclam exclam' exclam;
  ignore sub exclam' exclam exclam;
  ignore sub parenleft question exclam' exclam;
  ignore sub parenleft question less exclam' exclam;
  sub LIG exclam' by exclam_exclam.liga;
  sub exclam'  exclam  by LIG;
} exclam_exclam;

lookup greater_equal {
  ignore sub greater greater' equal;
  ignore sub greater' equal equal;
  ignore sub greater' equal less;
  sub LIG equal' by greater_equal.liga;
  sub greater'  equal  by LIG;
} greater_equal;

lookup greater_greater {
  ignore sub greater greater' greater;
  ignore sub greater' greater greater;
  ignore sub asterisk greater' greater;
  ignore sub plus greater' greater;
  ignore sub dollar greater' greater;
  sub LIG greater' by greater_greater.liga;
  sub greater'  greater  by LIG;
} greater_greater;

lookup greater_hyphen {
  ignore sub greater greater' hyphen;
  ignore sub greater' hyphen hyphen;
  sub LIG hyphen' by greater_hyphen.liga;
  sub greater'  hyphen  by LIG;
} greater_hyphen;

lookup hyphen_greater {
  ignore sub hyphen hyphen' greater;
  ignore sub hyphen' greater greater;
  sub LIG greater' by hyphen_greater.liga;
  sub hyphen'  greater  by LIG;
} hyphen_greater;

lookup hyphen_less {
  ignore sub hyphen hyphen' less;
  ignore sub hyphen' less less;
  sub LIG less' by hyphen_less.liga;
  sub hyphen'  less  by LIG;
} hyphen_less;

lookup less_equal {
  ignore sub less less' equal;
  ignore sub less' equal equal;
  ignore sub parenleft question less' equal;
  sub LIG equal' by less_equal.liga;
  sub less'  equal  by LIG;
} less_equal;

lookup less_greater {
  ignore sub less less' greater;
  ignore sub less' greater greater;
  sub LIG greater' by less_greater.liga;
  sub less'  greater  by LIG;
} less_greater;

lookup less_hyphen {
  ignore sub less less' hyphen;
  ignore sub less' hyphen hyphen;
  sub LIG hyphen' by less_hyphen.liga;
  sub less'  hyphen  by LIG;
} less_hyphen;

lookup less_less {
  ignore sub less less' less;
  ignore sub less' less less;
  ignore sub less' less asterisk;
  ignore sub less' less plus;
  ignore sub less' less dollar;
  sub LIG less' by less_less.liga;
  sub less'  less  by LIG;
} less_less;

lookup less_slash {
  ignore sub less less' slash;
  ignore sub less' slash slash;
  sub LIG slash' by less_slash.liga;
  sub less'  slash  by LIG;
} less_slash;

lookup numbersign_numbersign {
  ignore sub numbersign numbersign' numbersign;
  ignore sub numbersign' numbersign numbersign;
  sub LIG numbersign' by numbersign_numbersign.liga;
  sub numbersign'  numbersign  by LIG;
} numbersign_numbersign;

lookup period_period {
  ignore sub period period' period;
  ignore sub period' period period;
  sub LIG period' by period_period.liga;
  sub period'  period  by LIG;
} period_period;

lookup question_colon {
  ignore sub question question' colon;
  ignore sub question' colon colon;
  ignore sub parenleft question' colon;
  sub LIG colon' by question_colon.liga;
  sub question'  colon  by LIG;
} question_colon;

lookup question_period {
  ignore sub question question' period;
  ignore sub question' period period;
  sub LIG period' by question_period.liga;
  sub question'  period  by LIG;
} question_period;

lookup question_question {
  ignore sub question question' question;
  ignore sub question' question question;
  sub LIG question' by question_question.liga;
  sub question'  question  by LIG;
} question_question;

lookup semicolon_semicolon {
  ignore sub semicolon semicolon' semicolon;
  ignore sub semicolon' semicolon semicolon;
  sub LIG semicolon' by semicolon_semicolon.liga;
  sub semicolon'  semicolon  by LIG;
} semicolon_semicolon;

lookup slash_asterisk {
  ignore sub slash slash' asterisk;
  ignore sub slash' asterisk asterisk;
  ignore sub slash' asterisk slash;
  ignore sub asterisk slash' asterisk;
  sub LIG asterisk' by slash_asterisk.liga;
  sub slash'  asterisk  by LIG;
} slash_asterisk;

lookup slash_equal {
  ignore sub slash slash' equal;
  ignore sub slash' equal equal;
  sub LIG equal' by slash_equal.liga;
  sub slash'  equal  by LIG;
} slash_equal;

lookup slash_greater {
  ignore sub slash slash' greater;
  ignore sub slash' greater greater;
  sub LIG greater' by slash_greater.liga;
  sub slash'  greater  by LIG;
} slash_greater;

lookup slash_slash {
  ignore sub slash slash' slash;
  ignore sub slash' slash slash;
  sub LIG slash' by slash_slash.liga;
  sub slash'  slash  by LIG;
} slash_slash;

lookup underscore_underscore {
  ignore sub underscore underscore' underscore;
  ignore sub underscore' underscore underscore;
  sub LIG underscore' by underscore_underscore.liga;
  sub underscore'  underscore  by LIG;
} underscore_underscore;
### end of generated cal
} calt;

